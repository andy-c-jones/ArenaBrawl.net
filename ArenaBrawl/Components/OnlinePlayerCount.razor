@using ArenaBrawl.InMemoryData
@using ArenaBrawl.InMemoryData.Matchmaking
@inject PlayerCountRepository OnlinePlayers
@inject PlayerInGameCountRepository Repository

<style type="text/css">
    .playercount-led-green {
        margin: 0 auto;
        width: 12px;
        height: 12px;
        background-color: #04ff00;
        border-radius: 50%;

        box-shadow: rgba(0, 0, 0, 0.2) 0 -1px 7px 1px, inset #304701 0 -1px 9px, #89FF00 0 2px 12px;
        display: inline-block;
    }

    .playercount-led-yellow {
        margin: 0 auto;
        width: 12px;
        height: 12px;
        background-color: #ff9900;
        border-radius: 50%;

        box-shadow: rgba(0, 0, 0, 0.2) 0 -1px 7px 1px, inset #304701 0 -1px 9px, #ff9900 0 2px 12px;
        display: inline-block;
    }

    .playercount-text { display: inline-block; }

</style>

<div class="playercount">
    <p>
        <div class=@(_count == 0 ? "playercount-led-yellow" : "playercount-led-green")></div>
        <div class="playercount-text">@_count @(PlayersText(_count)) online</div>
    </p>
    <p>
        <div class=@(_standardCount == 0 ? "playercount-led-yellow" : "playercount-led-green")></div>
        <div class="playercount-text">@_standardCount @(PlayersText(_standardCount)) in-game playing @BrawlFormat.Standard.ToString()</div>
    </p>
    <p>
        <div class=@(_historicCount == 0 ? "playercount-led-yellow" : "playercount-led-green")></div>
        <div class="playercount-text">@_historicCount @(PlayersText(_historicCount)) in-game playing @BrawlFormat.Historic.ToString()</div>
    </p>
</div>

@code {

    protected override void OnInitialized()
    {
        OnlinePlayers.CountUpdated += OnlinePlayersOnCountUpdated();
        Repository.UpdatedCounts += OnlinePlayersOnCountUpdated;
        _count = OnlinePlayers.CurrentPlayers();
    }

    private Action<int> OnlinePlayersOnCountUpdated() => current =>
    {
        _count = current;
        InvokeAsync(StateHasChanged);
    };

    private int _count;

    private void OnlinePlayersOnCountUpdated(Dictionary<BrawlFormat, int> current)
    {
        _historicCount = current.TryGetValue(BrawlFormat.Historic, out var historicCount) ? historicCount : 0;
        _standardCount = current.TryGetValue(BrawlFormat.Standard, out var standardCount) ? standardCount : 0;
        InvokeAsync(StateHasChanged);
    }

    private int _historicCount;
    private int _standardCount;

    private string PlayersText(int count) => count == 1 ? "player" : "players";
}